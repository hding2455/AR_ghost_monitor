// Generated by gencpp from file ambf_msgs/VehicleCmd.msg
// DO NOT EDIT!


#ifndef AMBF_MSGS_MESSAGE_VEHICLECMD_H
#define AMBF_MSGS_MESSAGE_VEHICLECMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Wrench.h>

namespace ambf_msgs
{
template <class ContainerAllocator>
struct VehicleCmd_
{
  typedef VehicleCmd_<ContainerAllocator> Type;

  VehicleCmd_()
    : header()
    , chassis_wrench()
    , wheel_steering()
    , wheel_power()
    , wheel_brake()
    , brake(false)  {
    }
  VehicleCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , chassis_wrench(_alloc)
    , wheel_steering(_alloc)
    , wheel_power(_alloc)
    , wheel_brake(_alloc)
    , brake(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _chassis_wrench_type;
  _chassis_wrench_type chassis_wrench;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _wheel_steering_type;
  _wheel_steering_type wheel_steering;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _wheel_power_type;
  _wheel_power_type wheel_power;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _wheel_brake_type;
  _wheel_brake_type wheel_brake;

   typedef uint8_t _brake_type;
  _brake_type brake;





  typedef boost::shared_ptr< ::ambf_msgs::VehicleCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ambf_msgs::VehicleCmd_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleCmd_

typedef ::ambf_msgs::VehicleCmd_<std::allocator<void> > VehicleCmd;

typedef boost::shared_ptr< ::ambf_msgs::VehicleCmd > VehicleCmdPtr;
typedef boost::shared_ptr< ::ambf_msgs::VehicleCmd const> VehicleCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ambf_msgs::VehicleCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ambf_msgs::VehicleCmd_<ContainerAllocator1> & lhs, const ::ambf_msgs::VehicleCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.chassis_wrench == rhs.chassis_wrench &&
    lhs.wheel_steering == rhs.wheel_steering &&
    lhs.wheel_power == rhs.wheel_power &&
    lhs.wheel_brake == rhs.wheel_brake &&
    lhs.brake == rhs.brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ambf_msgs::VehicleCmd_<ContainerAllocator1> & lhs, const ::ambf_msgs::VehicleCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ambf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::VehicleCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::VehicleCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::VehicleCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20858f9fdd87217d00304616067bb7b4";
  }

  static const char* value(const ::ambf_msgs::VehicleCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20858f9fdd87217dULL;
  static const uint64_t static_value2 = 0x00304616067bb7b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ambf_msgs/VehicleCmd";
  }

  static const char* value(const ::ambf_msgs::VehicleCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Wrench chassis_wrench\n"
"float32[] wheel_steering\n"
"float32[] wheel_power\n"
"float32[] wheel_brake\n"
"bool brake\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ambf_msgs::VehicleCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.chassis_wrench);
      stream.next(m.wheel_steering);
      stream.next(m.wheel_power);
      stream.next(m.wheel_brake);
      stream.next(m.brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ambf_msgs::VehicleCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ambf_msgs::VehicleCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "chassis_wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.chassis_wrench);
    s << indent << "wheel_steering[]" << std::endl;
    for (size_t i = 0; i < v.wheel_steering.size(); ++i)
    {
      s << indent << "  wheel_steering[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheel_steering[i]);
    }
    s << indent << "wheel_power[]" << std::endl;
    for (size_t i = 0; i < v.wheel_power.size(); ++i)
    {
      s << indent << "  wheel_power[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheel_power[i]);
    }
    s << indent << "wheel_brake[]" << std::endl;
    for (size_t i = 0; i < v.wheel_brake.size(); ++i)
    {
      s << indent << "  wheel_brake[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheel_brake[i]);
    }
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMBF_MSGS_MESSAGE_VEHICLECMD_H
