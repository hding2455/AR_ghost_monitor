// Generated by gencpp from file ambf_msgs/VehicleState.msg
// DO NOT EDIT!


#ifndef AMBF_MSGS_MESSAGE_VEHICLESTATE_H
#define AMBF_MSGS_MESSAGE_VEHICLESTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>

namespace ambf_msgs
{
template <class ContainerAllocator>
struct VehicleState_
{
  typedef VehicleState_<ContainerAllocator> Type;

  VehicleState_()
    : header()
    , sim_step(0)
    , name()
    , wall_time(0.0)
    , sim_time(0.0)
    , mass(0.0)
    , pInertia()
    , pose()
    , wheel_count(0)
    , wheel_offsets()  {
    }
  VehicleState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sim_step(0)
    , name(_alloc)
    , wall_time(0.0)
    , sim_time(0.0)
    , mass(0.0)
    , pInertia(_alloc)
    , pose(_alloc)
    , wheel_count(0)
    , wheel_offsets(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _sim_step_type;
  _sim_step_type sim_step;

   typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef float _wall_time_type;
  _wall_time_type wall_time;

   typedef float _sim_time_type;
  _sim_time_type sim_time;

   typedef float _mass_type;
  _mass_type mass;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pInertia_type;
  _pInertia_type pInertia;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef int8_t _wheel_count_type;
  _wheel_count_type wheel_count;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _wheel_offsets_type;
  _wheel_offsets_type wheel_offsets;





  typedef boost::shared_ptr< ::ambf_msgs::VehicleState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ambf_msgs::VehicleState_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleState_

typedef ::ambf_msgs::VehicleState_<std::allocator<void> > VehicleState;

typedef boost::shared_ptr< ::ambf_msgs::VehicleState > VehicleStatePtr;
typedef boost::shared_ptr< ::ambf_msgs::VehicleState const> VehicleStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ambf_msgs::VehicleState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ambf_msgs::VehicleState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ambf_msgs::VehicleState_<ContainerAllocator1> & lhs, const ::ambf_msgs::VehicleState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sim_step == rhs.sim_step &&
    lhs.name == rhs.name &&
    lhs.wall_time == rhs.wall_time &&
    lhs.sim_time == rhs.sim_time &&
    lhs.mass == rhs.mass &&
    lhs.pInertia == rhs.pInertia &&
    lhs.pose == rhs.pose &&
    lhs.wheel_count == rhs.wheel_count &&
    lhs.wheel_offsets == rhs.wheel_offsets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ambf_msgs::VehicleState_<ContainerAllocator1> & lhs, const ::ambf_msgs::VehicleState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ambf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::VehicleState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::VehicleState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::VehicleState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::VehicleState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ambf_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e44991cffd599ccc408523398b06f19";
  }

  static const char* value(const ::ambf_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e44991cffd599ccULL;
  static const uint64_t static_value2 = 0xc408523398b06f19ULL;
};

template<class ContainerAllocator>
struct DataType< ::ambf_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ambf_msgs/VehicleState";
  }

  static const char* value(const ::ambf_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ambf_msgs::VehicleState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 sim_step\n"
"std_msgs/String name\n"
"float32 wall_time\n"
"float32 sim_time\n"
"float32 mass\n"
"geometry_msgs/Point pInertia\n"
"geometry_msgs/Pose pose\n"
"int8 wheel_count\n"
"geometry_msgs/Pose[] wheel_offsets\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ambf_msgs::VehicleState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ambf_msgs::VehicleState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sim_step);
      stream.next(m.name);
      stream.next(m.wall_time);
      stream.next(m.sim_time);
      stream.next(m.mass);
      stream.next(m.pInertia);
      stream.next(m.pose);
      stream.next(m.wheel_count);
      stream.next(m.wheel_offsets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ambf_msgs::VehicleState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ambf_msgs::VehicleState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sim_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sim_step);
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "wall_time: ";
    Printer<float>::stream(s, indent + "  ", v.wall_time);
    s << indent << "sim_time: ";
    Printer<float>::stream(s, indent + "  ", v.sim_time);
    s << indent << "mass: ";
    Printer<float>::stream(s, indent + "  ", v.mass);
    s << indent << "pInertia: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pInertia);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "wheel_count: ";
    Printer<int8_t>::stream(s, indent + "  ", v.wheel_count);
    s << indent << "wheel_offsets[]" << std::endl;
    for (size_t i = 0; i < v.wheel_offsets.size(); ++i)
    {
      s << indent << "  wheel_offsets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.wheel_offsets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMBF_MSGS_MESSAGE_VEHICLESTATE_H
