// Generated by gencpp from file ambf_msgs/SensorState.msg
// DO NOT EDIT!


#ifndef AMBF_MSGS_MESSAGE_SENSORSTATE_H
#define AMBF_MSGS_MESSAGE_SENSORSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Pose.h>
#include <std_msgs/String.h>

namespace ambf_msgs
{
template <class ContainerAllocator>
struct SensorState_
{
  typedef SensorState_<ContainerAllocator> Type;

  SensorState_()
    : header()
    , sim_step(0)
    , type()
    , parent_name()
    , name()
    , wall_time(0.0)
    , sim_time(0.0)
    , pose()
    , count(0)
    , triggered()
    , range()
    , measurement()
    , sensed_objects()
    , sensed_objects_map()  {
    }
  SensorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sim_step(0)
    , type(_alloc)
    , parent_name(_alloc)
    , name(_alloc)
    , wall_time(0.0)
    , sim_time(0.0)
    , pose(_alloc)
    , count(0)
    , triggered(_alloc)
    , range(_alloc)
    , measurement(_alloc)
    , sensed_objects(_alloc)
    , sensed_objects_map(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _sim_step_type;
  _sim_step_type sim_step;

   typedef  ::std_msgs::String_<ContainerAllocator>  _type_type;
  _type_type type;

   typedef  ::std_msgs::String_<ContainerAllocator>  _parent_name_type;
  _parent_name_type parent_name;

   typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef float _wall_time_type;
  _wall_time_type wall_time;

   typedef float _sim_time_type;
  _sim_time_type sim_time;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef uint32_t _count_type;
  _count_type count;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _triggered_type;
  _triggered_type triggered;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _range_type;
  _range_type range;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _measurement_type;
  _measurement_type measurement;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::std_msgs::String_<ContainerAllocator> >::other >  _sensed_objects_type;
  _sensed_objects_type sensed_objects;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _sensed_objects_map_type;
  _sensed_objects_map_type sensed_objects_map;





  typedef boost::shared_ptr< ::ambf_msgs::SensorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ambf_msgs::SensorState_<ContainerAllocator> const> ConstPtr;

}; // struct SensorState_

typedef ::ambf_msgs::SensorState_<std::allocator<void> > SensorState;

typedef boost::shared_ptr< ::ambf_msgs::SensorState > SensorStatePtr;
typedef boost::shared_ptr< ::ambf_msgs::SensorState const> SensorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ambf_msgs::SensorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ambf_msgs::SensorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ambf_msgs::SensorState_<ContainerAllocator1> & lhs, const ::ambf_msgs::SensorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sim_step == rhs.sim_step &&
    lhs.type == rhs.type &&
    lhs.parent_name == rhs.parent_name &&
    lhs.name == rhs.name &&
    lhs.wall_time == rhs.wall_time &&
    lhs.sim_time == rhs.sim_time &&
    lhs.pose == rhs.pose &&
    lhs.count == rhs.count &&
    lhs.triggered == rhs.triggered &&
    lhs.range == rhs.range &&
    lhs.measurement == rhs.measurement &&
    lhs.sensed_objects == rhs.sensed_objects &&
    lhs.sensed_objects_map == rhs.sensed_objects_map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ambf_msgs::SensorState_<ContainerAllocator1> & lhs, const ::ambf_msgs::SensorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ambf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::SensorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::SensorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::SensorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::SensorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ambf_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82fb33535a7311b9256cac9ac5115e67";
  }

  static const char* value(const ::ambf_msgs::SensorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82fb33535a7311b9ULL;
  static const uint64_t static_value2 = 0x256cac9ac5115e67ULL;
};

template<class ContainerAllocator>
struct DataType< ::ambf_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ambf_msgs/SensorState";
  }

  static const char* value(const ::ambf_msgs::SensorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ambf_msgs::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint32 sim_step\n"
"std_msgs/String type\n"
"std_msgs/String parent_name\n"
"std_msgs/String name\n"
"float32 wall_time\n"
"float32 sim_time\n"
"geometry_msgs/Pose pose\n"
"uint32 count\n"
"bool[] triggered\n"
"float32[] range\n"
"float32[] measurement\n"
"std_msgs/String[] sensed_objects\n"
"uint8[] sensed_objects_map\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::ambf_msgs::SensorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ambf_msgs::SensorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sim_step);
      stream.next(m.type);
      stream.next(m.parent_name);
      stream.next(m.name);
      stream.next(m.wall_time);
      stream.next(m.sim_time);
      stream.next(m.pose);
      stream.next(m.count);
      stream.next(m.triggered);
      stream.next(m.range);
      stream.next(m.measurement);
      stream.next(m.sensed_objects);
      stream.next(m.sensed_objects_map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ambf_msgs::SensorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ambf_msgs::SensorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sim_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sim_step);
    s << indent << "type: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.type);
    s << indent << "parent_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.parent_name);
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "wall_time: ";
    Printer<float>::stream(s, indent + "  ", v.wall_time);
    s << indent << "sim_time: ";
    Printer<float>::stream(s, indent + "  ", v.sim_time);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "count: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.count);
    s << indent << "triggered[]" << std::endl;
    for (size_t i = 0; i < v.triggered.size(); ++i)
    {
      s << indent << "  triggered[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.triggered[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range[i]);
    }
    s << indent << "measurement[]" << std::endl;
    for (size_t i = 0; i < v.measurement.size(); ++i)
    {
      s << indent << "  measurement[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.measurement[i]);
    }
    s << indent << "sensed_objects[]" << std::endl;
    for (size_t i = 0; i < v.sensed_objects.size(); ++i)
    {
      s << indent << "  sensed_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.sensed_objects[i]);
    }
    s << indent << "sensed_objects_map[]" << std::endl;
    for (size_t i = 0; i < v.sensed_objects_map.size(); ++i)
    {
      s << indent << "  sensed_objects_map[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.sensed_objects_map[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMBF_MSGS_MESSAGE_SENSORSTATE_H
