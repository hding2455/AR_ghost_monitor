// Generated by gencpp from file ambf_msgs/RigidBodyCmd.msg
// DO NOT EDIT!


#ifndef AMBF_MSGS_MESSAGE_RIGIDBODYCMD_H
#define AMBF_MSGS_MESSAGE_RIGIDBODYCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Wrench.h>
#include <geometry_msgs/Twist.h>

namespace ambf_msgs
{
template <class ContainerAllocator>
struct RigidBodyCmd_
{
  typedef RigidBodyCmd_<ContainerAllocator> Type;

  RigidBodyCmd_()
    : header()
    , cartesian_cmd_type(0)
    , pose()
    , wrench()
    , twist()
    , joint_cmds_types()
    , joint_cmds()
    , publish_children_names(false)
    , publish_joint_names(false)
    , publish_joint_positions(false)  {
    }
  RigidBodyCmd_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , cartesian_cmd_type(0)
    , pose(_alloc)
    , wrench(_alloc)
    , twist(_alloc)
    , joint_cmds_types(_alloc)
    , joint_cmds(_alloc)
    , publish_children_names(false)
    , publish_joint_names(false)
    , publish_joint_positions(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _cartesian_cmd_type_type;
  _cartesian_cmd_type_type cartesian_cmd_type;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _twist_type;
  _twist_type twist;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _joint_cmds_types_type;
  _joint_cmds_types_type joint_cmds_types;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joint_cmds_type;
  _joint_cmds_type joint_cmds;

   typedef uint8_t _publish_children_names_type;
  _publish_children_names_type publish_children_names;

   typedef uint8_t _publish_joint_names_type;
  _publish_joint_names_type publish_joint_names;

   typedef uint8_t _publish_joint_positions_type;
  _publish_joint_positions_type publish_joint_positions;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_FORCE)
  #undef TYPE_FORCE
#endif
#if defined(_WIN32) && defined(TYPE_POSITION)
  #undef TYPE_POSITION
#endif
#if defined(_WIN32) && defined(TYPE_VELOCITY)
  #undef TYPE_VELOCITY
#endif

  enum {
    TYPE_FORCE = 0,
    TYPE_POSITION = 1,
    TYPE_VELOCITY = 2,
  };


  typedef boost::shared_ptr< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> const> ConstPtr;

}; // struct RigidBodyCmd_

typedef ::ambf_msgs::RigidBodyCmd_<std::allocator<void> > RigidBodyCmd;

typedef boost::shared_ptr< ::ambf_msgs::RigidBodyCmd > RigidBodyCmdPtr;
typedef boost::shared_ptr< ::ambf_msgs::RigidBodyCmd const> RigidBodyCmdConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator1> & lhs, const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.cartesian_cmd_type == rhs.cartesian_cmd_type &&
    lhs.pose == rhs.pose &&
    lhs.wrench == rhs.wrench &&
    lhs.twist == rhs.twist &&
    lhs.joint_cmds_types == rhs.joint_cmds_types &&
    lhs.joint_cmds == rhs.joint_cmds &&
    lhs.publish_children_names == rhs.publish_children_names &&
    lhs.publish_joint_names == rhs.publish_joint_names &&
    lhs.publish_joint_positions == rhs.publish_joint_positions;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator1> & lhs, const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ambf_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c54fc48da5e84240a367eff7725e74b4";
  }

  static const char* value(const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc54fc48da5e84240ULL;
  static const uint64_t static_value2 = 0xa367eff7725e74b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ambf_msgs/RigidBodyCmd";
  }

  static const char* value(const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int8 TYPE_FORCE=0\n"
"int8 TYPE_POSITION=1\n"
"int8 TYPE_VELOCITY=2\n"
"int8 cartesian_cmd_type # The type of cartesian cmd i.e. F/P/V\n"
"geometry_msgs/Pose pose\n"
"geometry_msgs/Wrench wrench\n"
"geometry_msgs/Twist twist\n"
"int8[] joint_cmds_types # For each joint, the type of cmd i.e. F/P/V\n"
"float32[] joint_cmds\n"
"bool publish_children_names\n"
"bool publish_joint_names\n"
"bool publish_joint_positions\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Wrench\n"
"# This represents force in free space, separated into\n"
"# its linear and angular parts.\n"
"Vector3  force\n"
"Vector3  torque\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
;
  }

  static const char* value(const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.cartesian_cmd_type);
      stream.next(m.pose);
      stream.next(m.wrench);
      stream.next(m.twist);
      stream.next(m.joint_cmds_types);
      stream.next(m.joint_cmds);
      stream.next(m.publish_children_names);
      stream.next(m.publish_joint_names);
      stream.next(m.publish_joint_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RigidBodyCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ambf_msgs::RigidBodyCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ambf_msgs::RigidBodyCmd_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "cartesian_cmd_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cartesian_cmd_type);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    s << indent << "twist: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.twist);
    s << indent << "joint_cmds_types[]" << std::endl;
    for (size_t i = 0; i < v.joint_cmds_types.size(); ++i)
    {
      s << indent << "  joint_cmds_types[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.joint_cmds_types[i]);
    }
    s << indent << "joint_cmds[]" << std::endl;
    for (size_t i = 0; i < v.joint_cmds.size(); ++i)
    {
      s << indent << "  joint_cmds[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_cmds[i]);
    }
    s << indent << "publish_children_names: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.publish_children_names);
    s << indent << "publish_joint_names: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.publish_joint_names);
    s << indent << "publish_joint_positions: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.publish_joint_positions);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMBF_MSGS_MESSAGE_RIGIDBODYCMD_H
